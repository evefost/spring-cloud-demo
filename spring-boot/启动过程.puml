@startuml
main -> SpringApplication:static run
Bob --> Alice: Authentication Response
SpringApplication->SpringApplication:new
SpringApplication->SpringApplication:super()检测是不是web环境、保存启动类等
SpringApplication->SpringApplication:getSpringFactoriesInstances()\n从spring.factories配置文件中读取所有\nApplicationContextInitializer或ApplicationListener 接口的配置类，\n并创建实列，可利用该接口\n实现自己的一些扩展
SpringApplication->SpringApplication:run
SpringApplication->SpringApplication:getRunListeners
SpringApplication->SpringApplication:prepareEnvironment 准备环境配置Environment\n根据环境类型，\n创建相应的environment(StandardServletEnvironment、\nStandardReactiveWebEnvironment、StandardEnvironment)
SpringApplication->SpringApplication:createApplicationContext 根据不同的环境WebApplicationType 创建相应的Context
SpringApplication->SpringApplication:prepareContext:环境、beanfactory 配置准备
SpringApplication->SpringApplication:refresh开加ApplicationContext刷新启动
SpringApplication->ConfigurableApplicationContext:refresh 正常的ApplicationContext 启动流程
ConfigurableApplicationContext->PostProcessorRegistrationDelegate:invokeBeanFactoryPostProcessors
ConfigurableApplicationContext->PostProcessorRegistrationDelegate:static invokeBeanDefinitionRegistryPostProcessors
PostProcessorRegistrationDelegate->ConfigurationClassPostProcessor:postProcessBeanDefinitionRegistry:通过配置类创建BeanDefinitions
ConfigurationClassPostProcessor->ConfigurationClassPostProcessor:processConfigBeanDefinitions
ConfigurationClassPostProcessor->ConfigurationClassParser:parse 解释出所有AutoConfig configClasses
ConfigurationClassParser->ConfigurationClassParser:validate
ConfigurationClassPostProcessor->ConfigurationClassBeanDefinitionReader:loadBeanDefinitions(configClasses)\n加载所有AutoConfiguration配置的beanDefinitions
SpringApplication --> main:
@enduml